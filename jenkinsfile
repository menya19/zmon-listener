@Library('retort-lib') _
def label = "jenkins-${UUID.randomUUID().toString()}"


def DOCKER_IMAGE = 'boot-sample'
def K8S_NAMESPACE = 'menya'
def VERSION = '0.1.1'

podTemplate(label:label,
    containers: [
        //containerTemplate(name: 'docker', image: 'docker', ttyEnabled: true, command: 'cat'),
        //containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl', ttyEnabled: true, command: 'cat'),
        containerTemplate(name: 'helm', image: 'lachlanevenson/k8s-helm', ttyEnabled: true, command: 'cat')
    ],
    volumes: [
        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
        configMapVolume(mountPath: '/var/config/menya-test', configMapName: 'zmon-kube-config'),
//        persistentVolumeClaim(mountPath: '/root/.m2', claimName: 'zcp-jenkins-mvn-repo')
    ]) {

    node(label) {
        stage('SOURCE CHECKOUT') {
            def repo = checkout scm
            // env.SCM_INFO = repo.inspect()
        }

//        stage('DEPLOY') {
//            container('kubectl') {
//
//              withEnv(['KUBECONFIG=/var/config/menya-test/kube-config-zmon.yml']) {
////                withFolderProperties{
////                  sh "echo ${env.DOCKER_REGISTRY}"
////                }
//                  // yaml 파일 일부 수정이 필요한 경우
//                  // yaml.update file: 'k8s/deploy.yaml', update: ['.spec.template.spec.key': "value"]
//                  kubeCmd.apply file: 'k8s/deploy.yaml', namespace: K8S_NAMESPACE, wait: 300
//                  kubeCmd.apply file: 'k8s/service.yaml', namespace: K8S_NAMESPACE
//                  kubeCmd.apply file: 'k8s/ingress.yaml', namespace: K8S_NAMESPACE
//              }
//            }
//        }

        stage('HELM') {
            container('helm') {
              withEnv(['KUBECONFIG=/var/config/menya-test/kube-config-zmon.yml']) {
                yaml.update file: 'values.yaml', update: ['.config.inputs[0].http_listener.basic_username': "usertest", '.config.inputs[0].http_listener.basic_password': "passtest", '.config.outputs[0].kafka.brokers[0]':'value0', '.config.outputs[0].kafka.brokers[1]':'value1', '.config.outputs[0].kafka.brokers[2]':'value2', '.config.outputs[0].kafka.topic':'telegraf__topictest']
                sh "echo values.yaml"
                //sh 'helm list'
              }
            }
        }

    }
}
